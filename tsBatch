#!/usr/bin/python


import os
import sys
import shutil
import re
import optparse
import os.path
import glob

# =============================================================================
#
#                               PREAMBLE
#
# =============================================================================

def parse_commandline():
        """
        Parse the options given on the command-line.
        """
        parser = optparse.OptionParser()

        parser.add_option("-l", "--cacheFile",help="Text file with cache file list.",default = 'cacheList_1.txt')
	parser.add_option("-c", "--channel",help="IFO channel.",default = 'L1:GDS-CALIB_STRAIN')
	parser.add_option("-w", "--workdirectory",help="Working directory.",default = '.')
	parser.add_option("-s", "--sourceDir",help="Name of source directory.",default = 'source')
	parser.add_option("-d", "--debug", help="Debug level for MATLAB function(s)", default = 1)
	parser.add_option("-r", "--redundant", help="Redundant flag for MATLAB frame reading function (normally set to 0)", default = 0)

        opts, args = parser.parse_args()
        return opts

# =============================================================================
#
#                                    Main
#
# =============================================================================
def main():
        ## parse the command line
        opts = parse_commandline()
        cFile = opts.cacheFile
	wdir = opts.workdirectory
	channel = opts.channel
	sdir = opts.sourceDir
	duration = 12 #  hard-coded for now
	central = duration/2
	cdir = 1
	if wdir == '.':
		checkList = glob.glob(sdir + '/*.txt')  # check to see if any files exist already
		missingList = glob.glob(sdir + '/*missing') # check if any times were marked missing
		#cacheList = glob.glob('cache/*.lcf') # get cache files
	else:
		checkList = glob.glob(wdir  + '/' + sdir + '/*.txt')  # check to see if any files exist already
                missingList = glob.glob(wdir+ '/' + sdir + '/*missing') # check if any times were marked missing
		#cacheList = glob.glob(wdir + '/cache/*.lcf') # get cache files
		cFile = wdir + '/' + cFile
		cdir = 0
        times = open(cFile, 'r')
        tms = times.readlines()
	i = 0
	for item in checkList:
		if cdir:
			item = item.split('+')
			item = item[0]
			item = item.split('/')
			item = float(item[1])
			item = "%.4f" % item
			checkList[i] = item
		else:
			item = item.split('/')
			#print item
			item = item[len(item)-1:len(item)]
			s = '/'
			item = s.join(item)
			#print item
			item = item.split('+')
			#print item
                        item = item[0]
                        item = item.split('/')
			#print item
                        item = float(item[len(item)-1])
                        item = "%.4f" % item
                        checkList[i] = item
		i = i + 1
	#print checkList
	i = 0
	for item in missingList:
		if cdir:
			item = item.split('_')
			item = item[0]
			item = item.split('/')
                	item = item[1]
			missingList[i] = item
		else:
			item = item.split('/')
                        item = item[len(item)-1:len(item)]
                        s = '/'
                        item = s.join(item)
			item = item.split('_')
                        item = item[0]
                        item = item.split('/')
                        item = item[1]
                        missingList[i] = item
		i = i + 1
	#print missingList
	j = 1
	number = len(tms) - len(checkList) - len(missingList)
        for line in tms:
		line = line.strip('\n')
		chtime = line.split('.')
		chtime = chtime[1:len(chtime)-1]
		jn = '.'
		chtime = jn.join(chtime)
		chtime = chtime.split('_')
		chtimeA = float(chtime[0])
		chtimeB = float(chtime[1])
		chtimeD = (chtimeB - chtimeA)/2
		chtime = chtimeA + chtimeD
		#print line
		#diff = float(chtime - float(central)
		#diff = round(diff,2)
		diffStr = "%.4f"%chtimeA
		#diffStr = "%.4f" % diff
		#print diffStr
		#print str(round(float(line) - float(central),4))
		#print str(line)
		if (not (diffStr in checkList)) and (not (str(float(chtime)) in missingList)):
			if number > 0:
				print 'Fetching time series ' + str(j) + ' of ' + str(number)
			else:
				print 'Fetching time series ' + str(j)
	     		cmd = 'getTimeSeries -C ' + line + ' -f ' + channel  + ' -d ' + str(opts.debug) + ' -w ' + wdir + ' -o ' + sdir + ' -r ' + str(opts.redundant)
                	#cmd = '/usr/bin/gw_data_find --observatory L --frame-cache  --url-type file --gps-start-time ' + start + ' --gps-end-time ' + end + ' --output ' + namestring + ' --type L1_R'
                	#cmd = 'source inputfiles/MatlabSetup_R2008a_glnxa64.sh; ./list_analyze %s %d'%(path,tol)
                	print cmd
                	os.system(cmd)
			j = j + 1
	times.close()
if __name__ == "__main__":
    main()
