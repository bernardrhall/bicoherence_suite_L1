#!/usr/bin/python


import os
import sys
import shutil
import re
import optparse
import os.path
import glob
import commands

from bcv import git_version

#runList = glob.glob(ipath + '/*.txt')
def parse_commandline():
        """
        Parse the options given on the command-line.
        """
        parser = optparse.OptionParser(usage = __doc__,version=git_version.verbose_msg)

        parser.add_option("-o", "--outpath",help="Destination directory.",default = 'gaussian_T_0_8')
        parser.add_option("-i", "--inpath",help="Source (timeseries) directory.",default = 'gaussian_source_full')
        parser.add_option("-p", "--pubDirRel",help="Relative path of public directory.",default = 'gaussian_T_0_8')
        parser.add_option("-s", "--samplingRate",help="Time series sampling rate.",default = 16384)
        parser.add_option("-f", "--fontSize",help="Size of fonts on plot(s).",default = 14)
        parser.add_option("-d", "--duration",help="Duration of time series (s).",default = 12)
	parser.add_option("-t", "--time_window",help="Duration of analysis.",default = 4)
	parser.add_option("-c", "--condor",help="Submit to Condor (yes, 1/no, 0).",default = 1)

        opts, args = parser.parse_args()
        return opts

# =============================================================================
#
#                                    Main
#
# =============================================================================
def main():
	## parse the command line
        opts = parse_commandline()
	opath = opts.outpath
	ipath = opts.inpath
	pdr = opts.pubDirRel
	fs = float(opts.samplingRate)
	duration = float(opts.duration)
	fontsize = int(opts.fontSize)
	time_window = float(opts.time_window)
	condor = int(opts.condor)
	if condor:
		accGroup = 'ligo.dev.o2.detchar.nonlin_coup.twochanveto'

	#########################################################################
	#GW_channel = opts.GW_channel
        #fs = float(opts.fs)
        #threshMan = int(opts.threshMan)
        #HbicohThresh = float(opts.HbicohThresh)
        #HbicohBspcThresh = float(opts.HbicohBspcThresh)
        #fnct = int(opts.fnct)
        #mode = int(opts.mode)
        #filt = int(opts.filt)
        #ChannelA = opts.ChannelA
        #ChannelB = opts.ChannelB
        #segslice = int(opts.segslice)
        #segStart = float(opts.segStart)
        #segEnd = float(opts.segEnd)
        #full_SNR = int(opts.full_SNR)
        #autom = int(opts.autom)
        #time_window = float(opts.time_window)
        #offset_multiplier = float(opts.offset_multiplier)
        #ol = float(opts.ol)
        #seg = int(opts.seg)
        #tile = int(opts.tile)
        #GPS_central = float(opts.GPS_central)
        #check = int(opts.check)
        #dnsmple = int(opts.dnsmple)
        #decm = int(opts.decm)
        #plot_img = int(opts.plot_img)
        #randomize = int(opts.randomize)
        #preSeq = int(opts.preSeq)
        #sequenceN = opts.sequenceN
        #fsd = float(opts.fsd)
        #uSnrV = float(opts.uSnrV)
        #upr = float(opts.upr)
        #path = opts.path
        #ifoCh = opts.ifoChannel
        #verbose = 1
        #chStr = 1
	############################################################

	wd = commands.getstatusoutput('pwd')
        wd = wd[1]

	durAdd = duration/2

        tsList = glob.glob(ipath + '/*.txt')
	#print tsList
        L = list()
        tx = 0
        f = open(opath + '/sEvent.dat')
        mode = 1 # normally 2

        events = f.readlines()

        f.close()

        num = len(events)
        #print num
        i = 1
        #print events
        for line in events:
                linetest =  line.split('/')
                #print line
                if len(linetest) > 1:
                        line = linetest[len(linetest)-1]
                        linePre = line.split('_')
                else:
                        linePre = line.split('_')
                if mode == 1:
			print linePre
                        #linePre = line.split('.')
                        linePre = linePre[0]
			linePre = linePre.split('.')
			linePre = linePre[0]
                        #print linePre
                elif mode ==2:
                        #linePre = line.split('_')
                        #linePre = linePre[len(linePre)-2:len(linePre)-1]
                        linePre = linePre[len(linePre)-1]
                        linePre = linePre.split('.')
                        linePre = linePre[0:len(linePre)-1]
                        s = '.'
                        linePre = s.join(linePre)
                        #print linePre
                elif mode == 3:
                        linePre = linePre[0:len(linePre)-1]
                        s = '_'
                        linePre = s.join(linePre)
                        #print linePre
                for item in tsList:
                        if (mode == 1 or mode ==3):
                                itemPre = item.split('.')
                                itemPre = itemPre[0]
                                itemPre = itemPre.split('/')
                                itemPre = itemPre[len(itemPre)-1]
                                #print itemPre + ' ' + linePre
                                if itemPre == linePre:
                                        print 'Found it!'
                                        L.append(item + ' ' + line)
			elif mode == 2:
                                #print item
                                itemPre = item.split('+')
                                itemPre = itemPre[0]
                                itemPre = itemPre.split('/')
                                itemPre = itemPre[len(itemPre)-1]
                                #print itemPre
                                itemPre = float(itemPre) + durAdd
                                if abs(float(itemPre) - float(linePre)) < 1:
                                #print float(itemPre) - float(linePre)
                                #print itemPre + ' ' + linePre
                                #print float(itemPre) == float(linePre)
                                #if float(itemPre) == float(linePre):
                                        #print 'Found it!'
                                        L.append(item + ' ' + line)
	print L
        for line in L:
                line = line.split()
                line = line[0]
		gwFile = line	
                line = line.split('/')
                line = line[len(line)-1]
		if mode == 2:
			ifoName = line.split('+')
			#print ifoName
			ifoName = ifoName[1]
		else:
			line = line.split('.')
			line = line[0]
			ifoName = line
			#print ifoName
                print 'Calculating autocoherence for segment ' + str(i) + ' of ' + str(num)
                #cmd = 'source inputfiles/MatlabSetup_R2008a_glnxa64.sh; bicoherence_main_CF %s %s %s %f %f'%(opath,ipath,line,fs,fontsize)
                cmd = 'source inputfiles/MatlabSetup_R2008a_glnxa64.sh; bicoherence_main_CF %s %d %d %f %f %d %d %d %s %s %d %f %f %d %d %f %f %f %d %d %f %d %d %d %d %d %d %s %d %f %f %f %f %d %d %s %s'%(gwFile, fs, 1, 0.9606,0.7, 5, 1, 0, 'none', 'none',0 , 0, 2, 1, 1, time_window, 1, 95.0, 30, 1, 0, 1,0, 1, 1, 1, 0, 'none', 4096, 10, 20, 14, 1, 1, 1, pdr + '/', 'autocoherence_' + ifoName)
		if condor:
			cmd =  'nohup condor_run -a accounting_group=' + accGroup + ' ' + '"' + cmd + '"' + ' > ' + wd + '/' + pdr + '/AC_out_'+ str(i) + '.txt &'
		print cmd
                os.system(cmd)
                i = i + 1 	
	#bicoherence_main_CF( GW_channel, fs, threshMan, HbicohThresh,HbicohBspcThresh, fnct, mode, filt, ChannelA, ChannelB, segslice, segStart, segEnd, full_SNR, autom, time_window, offset_multiplier, ol, seg, tile, GPS_central, check, dnsmple, decm, plot_img, randomize, preSeq, sequenceN, fsd, pass_band_fl, pass_band_fh, uSnrV, upr, verbose, chStr, path, ifoCh )
	
	
if __name__ == "__main__":
    main()
